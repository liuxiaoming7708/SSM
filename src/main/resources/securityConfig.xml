<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!--登录页面不过滤 -->
    <http pattern="/login.jsp" security="none" />
    <http access-denied-page="/accessDenied.jsp">
        <!--form-login设置登录成功页 default-target-url="/admin.jsp" always-use-default-target="true" -->
        <form-login login-page="/login.jsp"
        authentication-failure-url="/login.jsp?error=true"/>

        <!--访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限 -->
         <!--<intercept-url pattern="/admin.jsp" access="ROLE_ADMIN" />-->
        <!--访问/**资源的用户必须具有ROLE_USER的权限 -->
        <!-- <intercept-url pattern="/**" access="ROLE_USER" /> -->
        <!-- session-management是用来防止多个用户同时登陆一个账号的。-->
        <session-management>
            <concurrency-control max-sessions="1"
                                 error-if-maximum-exceeded="false" />
        </session-management>
        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
    </http>

    <!--<http auto-config="true" >-->
        <!--&lt;!&ndash;login-page:登录页面;authentication-failure-url：登录失败后跳转的页面;default-target-url：登录成功后跳转的页面&ndash;&gt;-->
        <!--<form-login login-page="/login.jsp" authentication-failure-url="/login?login_error=true"/>-->
        <!--&lt;!&ndash;登出页面&ndash;&gt;-->
        <!--<logout logout-success-url="/login.jsp"/>-->
        <!--&lt;!&ndash;没有权限访问的页面&ndash;&gt;-->
        <!--<access-denied-handler error-page="/accessDenied.jsp" />-->
        <!--&lt;!&ndash;会化管理配置，第二次登录会让第一次登录失效 防止第二次登录：error-if-maximum-exceeded="false"&ndash;&gt;-->
        <!--&lt;!&ndash;<session-management invalid-session-url="/sessionTimeout">&ndash;&gt;-->
            <!--&lt;!&ndash;<concurrency-control max-sessions="1"&ndash;&gt;-->
                                 <!--&lt;!&ndash;error-if-maximum-exceeded="false" />&ndash;&gt;-->
        <!--&lt;!&ndash;</session-management>&ndash;&gt;-->
        <!--&lt;!&ndash;增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 &ndash;&gt;-->
        <!--<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />-->
    <!--</http>-->
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <b:bean id="myFilter"
            class="com.liu.ssm.security.MyFilterSecurityInterceptor">
        <b:property name="authenticationManager" ref="authenticationManager" />
        <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />
    </b:bean>
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="myUserDetailService">
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
        </authentication-provider>
    </authentication-manager>
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
    <b:bean id="myUserDetailService" class="com.liu.ssm.security.MyUserDetailService" />
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <b:bean id="myAccessDecisionManagerBean"
            class="com.liu.ssm.security.MyAccessDecisionManager">
    </b:bean>


    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <b:bean id="securityMetadataSource"
            class="com.liu.ssm.security.MyInvocationSecurityMetadataSource" />

</b:beans>